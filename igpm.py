# "CAN Gateway" messages. Some of these may originate from modules on other buses and
# be relayed via the IGPM, some generated by IGPM.
from message import PeriodicMessage, CounterField
import time

MSGS = [
    (
        0x414,
        "00,00,00,00,00,00,00,00",  # first byte changes briefly during charge session
        10,
    ),
    (
        0x5D0,
        "9D,13,04,00,00,00,00,00",  # Only the odometer reading
        1,
    ),
    (
        0x5D3,  # HU_DATC_PE_00 (???)
        "0F,00,00,00,00,00,00,00",
        1,
    ),
    (
        0x5DF,
        "C5,FF,FF,01,00,00,00,00",  # value changes one time in charge log
        5,
    ),
]


class CGW_541(PeriodicMessage):
    """Sent by IGPM."""

    def __init__(self, car):
        super().__init__(car, 0x541, [0x00,
                                      0x00,
                                      # drivers door closed, drivers seatbelt on
                                      # needs at least one of these to go into D
                                      0x44,
                                      0x00,
                                      0x08,
                                      0x08,  # "drive type option" bit set?
                                      0x00,
                                      0x00], 10)

    def update(self):
        self.data[0] = 0x03 if self.car.ignition_on else 0x00  # ignitionsw
        self.data[7] = 0x0C if self.car.ignition_on else 0x00  # IGN1, IGN2
        # note: parking brake switch is also in byte 7

class CGW_553(PeriodicMessage):
    """Sent by IGPM."""

    def __init__(self, car):
        super().__init__(car, 0x553, bytes.fromhex("0400000000008000"), 5)


class CGW_Clock(PeriodicMessage):
    """Sent by IGPM."""

    def __init__(self, car):
        super().__init__(car, 0x567, bytes.fromhex("0200000000000000"), 10)
        self.last_sec = 0

    def update(self):
        s = int(time.time())
        if s == self.last_sec:
            return
        self.last_sec = s
        c = time.localtime(s)
        self.data[1] = c.tm_hour
        self.data[2] = c.tm_min
        self.data[3] = c.tm_sec
        self.data[4] = 1  # valid flag


class CGW_5EC(PeriodicMessage):
    """ IGPM message, maybe with charge port lock """
    def __init__(self, car):
        super().__init__(car, 0x5ec, b'\x00' * 8, 10)

    def update(self):
        self.data[0] = 1 if self.car.charge_port_locked else 0


def get_messages(car):
    return [
        PeriodicMessage(car, can_id, bytes.fromhex(data.replace(",", "")), hz)
        for (can_id, data, hz) in MSGS
    ] + [
        k(car)
        for k in globals().values()
        if type(k) == type and k != PeriodicMessage and issubclass(k, PeriodicMessage)
    ]

